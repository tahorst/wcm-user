Timer unit: 1e-06 s

Total time: 0.060228 s
File: /home/travis/wcEcoli/models/ecoli/processes/polypeptide_elongation.py
Function: calculateRequest at line 103

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   103                                           	@line_profile
   104                                           	def calculateRequest(self):
   105                                           		# Set ribosome elongation rate based on simulation medium environment and elongation rate factor
   106                                           		# which is used to create single-cell variability in growth rate
   107                                           		# The maximum number of amino acids that can be elongated in a single timestep is set to 22 intentionally as the minimum number of padding values
   108                                           		# on the protein sequence matrix is set to 22. If timesteps longer than 1.0s are used, this feature will lead to errors in the effective ribosome
   109                                           		# elongation rate.
   110                                           
   111                                           		# Update in calculateRequest from previous evolveState since aa_count_diff is accessed in metabolism evolveState
   112                                           		# to prevent any execution order dependence
   113                                           		# TODO: use something other than a class attribute to pass this
   114         1         12.0     12.0      0.0  		self.aa_count_diff = dict(self.new_count_diff)
   115                                           
   116         1          3.0      3.0      0.0  		current_media_id = self._external_states['Environment'].current_media_id
   117                                           
   118                                           		# MODEL SPECIFIC: get ribosome elongation rate
   119         1          6.0      6.0      0.0  		self.ribosomeElongationRate = self.elongation_model.elongation_rate(current_media_id)
   120                                           
   121                                           		# If there are no active ribosomes, return immediately
   122         1         12.0     12.0      0.0  		if self.active_ribosomes.total_counts()[0] == 0:
   123                                           			return
   124                                           
   125                                           		# Build sequences to request appropriate amount of amino acids to
   126                                           		# polymerize for next timestep
   127         1          2.0      2.0      0.0  		proteinIndexes, peptideLengths = self.active_ribosomes.attrs(
   128         1       2233.0   2233.0      3.7  			'proteinIndex', 'peptideLength'
   129                                           			)
   130                                           
   131         1          3.0      3.0      0.0  		self.elongation_rates = self.make_elongation_rates(
   132         1          3.0      3.0      0.0  			self.randomState,
   133         1          2.0      2.0      0.0  			self.ribosomeElongationRate,
   134         1          7.0      7.0      0.0  			self.timeStepSec(),
   135         1        450.0    450.0      0.7  			self.variable_elongation)
   136                                           
   137         1          2.0      2.0      0.0  		sequences = buildSequences(
   138         1          2.0      2.0      0.0  			self.proteinSequences,
   139         1          2.0      2.0      0.0  			proteinIndexes,
   140         1          2.0      2.0      0.0  			peptideLengths,
   141         1       1028.0   1028.0      1.7  			self.elongation_rates)
   142                                           
   143         1         60.0     60.0      0.1  		sequenceHasAA = (sequences != polymerize.PAD_VALUE)
   144         1       1759.0   1759.0      2.9  		aasInSequences = np.bincount(sequences[sequenceHasAA], minlength=21)
   145                                           
   146                                           		# Calculate AA supply for expected doubling of protein
   147         1        129.0    129.0      0.2  		dryMass = (self.readFromListener("Mass", "dryMass") * units.fg)
   148         1         27.0     27.0      0.0  		translation_supply_rate = self.translation_aa_supply[current_media_id] * self.elngRateFactor
   149         1         65.0     65.0      0.1  		mol_aas_supplied = translation_supply_rate * dryMass * self.timeStepSec() * units.s
   150         1        158.0    158.0      0.3  		self.aa_supply = units.convertNoUnitToNumber(mol_aas_supplied * self.nAvogadro)
   151         1        237.0    237.0      0.4  		self.writeToListener("RibosomeData", "translationSupply", translation_supply_rate.asNumber())
   152                                           
   153                                           		# MODEL SPECIFIC: Calculate AA request
   154         1      53916.0  53916.0     89.5  		fraction_charged, aa_counts_for_translation = self.elongation_model.request(aasInSequences)
   155                                           
   156                                           		# Write to listeners
   157         1         30.0     30.0      0.0  		self.writeToListener("GrowthLimits", "fraction_trna_charged", np.dot(fraction_charged, self.aa_from_trna))
   158         1         14.0     14.0      0.0  		self.writeToListener("GrowthLimits", "aaPoolSize", self.aas.total_counts())
   159         1         11.0     11.0      0.0  		self.writeToListener("GrowthLimits", "aaRequestSize", aa_counts_for_translation)
   160                                           
   161                                           		# Request GTP for polymerization based on sequences
   162         1         20.0     20.0      0.0  		gtpsHydrolyzed = np.int64(np.ceil(self.gtpPerElongation * aa_counts_for_translation.sum()))
   163                                           
   164         1         16.0     16.0      0.0  		self.writeToListener("GrowthLimits", "gtpPoolSize", self.gtp.total_counts()[0])
   165         1         10.0     10.0      0.0  		self.writeToListener("GrowthLimits", "gtpRequestSize", gtpsHydrolyzed)
   166                                           
   167                                           		# GTP hydrolysis is carried out in Metabolism process for growth associated maintenance
   168                                           		# THis is set here for metabolism to use
   169         1          1.0      1.0      0.0  		self.gtpRequest = gtpsHydrolyzed
   170                                           
   171                                           		# Request full access to active ribosome molecules
   172         1          6.0      6.0      0.0  		self.active_ribosomes.request_access(self.EDIT_DELETE_ACCESS)

