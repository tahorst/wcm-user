Timer unit: 1e-06 s

Total time: 0.007591 s
File: /home/travis/wcEcoli/models/ecoli/processes/transcript_elongation.py
Function: evolveState at line 122

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   122                                           	@line_profile
   123                                           	def evolveState(self):
   124         1         34.0     34.0      0.4  		ntpCounts = self.ntps.counts()
   125         1         33.0     33.0      0.4  		self.writeToListener("GrowthLimits", "ntpAllocated", ntpCounts)
   126                                           
   127         1         13.0     13.0      0.2  		if self.active_RNAPs.total_counts()[0] == 0:
   128                                           			return
   129                                           
   130                                           		# Determine sequences that can be elongated
   131         1          2.0      2.0      0.0  		TU_indexes, transcript_lengths, coordinates, domain_index, direction = self.active_RNAPs.attrs(
   132         1       1170.0   1170.0     15.4  			'TU_index', 'transcript_length', 'coordinates', 'domain_index', 'direction')
   133         1          4.0      4.0      0.1  		sequences = buildSequences(
   134         1          4.0      4.0      0.1  			self.rnaSequences,
   135         1          3.0      3.0      0.0  			TU_indexes,
   136         1          3.0      3.0      0.0  			transcript_lengths,
   137         1        274.0    274.0      3.6  			self.elongation_rates)
   138                                           
   139                                           		# Polymerize transcripts based on sequences and available nucleotides
   140         1         18.0     18.0      0.2  		reactionLimit = ntpCounts.sum()
   141         1          4.0      4.0      0.1  		result = polymerize(
   142         1          3.0      3.0      0.0  			sequences,
   143         1          3.0      3.0      0.0  			ntpCounts,
   144         1          4.0      4.0      0.1  			reactionLimit,
   145         1          3.0      3.0      0.0  			self.randomState,
   146         1       4248.0   4248.0     56.0  			self.elongation_rates[TU_indexes])
   147         1          3.0      3.0      0.0  		sequenceElongations = result.sequenceElongation
   148         1          2.0      2.0      0.0  		ntpsUsed = result.monomerUsages
   149                                           
   150                                           		# Calculate updated transcript lengths and coordinates of RNAPs
   151         1          8.0      8.0      0.1  		updated_lengths = transcript_lengths + sequenceElongations
   152                                           
   153                                           		# Convert boolean array of directions to an array of 1's and -1's.
   154                                           		# True is converted to 1, False is converted to -1.
   155         1         24.0     24.0      0.3  		direction_converted = (2*(direction - 0.5)).astype(np.int64)
   156                                           
   157                                           		# Compute the updated coordinates of RNAPs. Coordinates of RNAPs
   158                                           		# moving in the positive direction are increased, whereas coordinates
   159                                           		# of RNAPs moving in the negative direction are decreased.
   160         1          3.0      3.0      0.0  		updated_coordinates = coordinates + np.multiply(
   161         1         11.0     11.0      0.1  			direction_converted, sequenceElongations)
   162                                           
   163                                           		# If there are active replisomes, construct mask for RNAPs that are
   164                                           		# expected to collide with replisomes in the current timestep. If the
   165                                           		# sign of the differences between the updated coordinates of replisomes
   166                                           		# and RNAPs are opposite to the sign of the differences between the
   167                                           		# original coordinates, a collision occurs and the RNAP is knocked off
   168                                           		# the chromosome.
   169                                           		# TODO (ggsun): This assumes that replisomes elongate at maximum rates.
   170                                           		# 	Ideally this should be done in the reconciler.
   171         1         19.0     19.0      0.3  		all_collisions = np.zeros_like(coordinates, dtype=np.bool)
   172         1         10.0     10.0      0.1  		headon_collisions = np.zeros_like(coordinates, dtype=np.bool)
   173                                           
   174         1         10.0     10.0      0.1  		if self.active_replisomes.total_counts()[0] > 0:
   175         1          2.0      2.0      0.0  			domain_index_replisome, right_replichore, coordinates_replisome = self.active_replisomes.attrs(
   176         1        313.0    313.0      4.1  				"domain_index", "right_replichore", "coordinates")
   177                                           
   178         1          2.0      2.0      0.0  			elongation_length = np.ceil(
   179         1         17.0     17.0      0.2  				self.dnaPolyElngRate * self.timeStepSec())
   180                                           
   181         1          3.0      3.0      0.0  			for rr, coord_rep, dmn_idx in izip(right_replichore,
   182         3         12.0      4.0      0.2  					coordinates_replisome, domain_index_replisome):
   183         2          4.0      2.0      0.1  				if rr:
   184                                           					coordinates_mask = (
   185         1         10.0     10.0      0.1  						np.multiply(coordinates - coord_rep,
   186         1         25.0     25.0      0.3  							coordinates - (coord_rep + elongation_length)) < 0)
   187                                           				else:
   188                                           					coordinates_mask = (
   189         1          6.0      6.0      0.1  						np.multiply(coordinates - coord_rep,
   190         1         19.0     19.0      0.3  							coordinates - (coord_rep - elongation_length)) < 0)
   191                                           
   192         2          5.0      2.5      0.1  				all_collisions_mask = np.logical_and(
   193         2         17.0      8.5      0.2  					domain_index == dmn_idx, coordinates_mask)
   194         2          7.0      3.5      0.1  				all_collisions[all_collisions_mask] = True
   195                                           
   196                                           				# Collisions are head-on if replisomes and RNAPs are going in
   197                                           				# opposite directions, hence the exclusive OR
   198         2          4.0      2.0      0.1  				headon_collisions_mask = np.logical_and(
   199         2         16.0      8.0      0.2  					all_collisions_mask, np.logical_xor(direction, rr))
   200         2          6.0      3.0      0.1  				headon_collisions[headon_collisions_mask] = True
   201                                           
   202                                           		# Remaining collisions are codirectional
   203         1          2.0      2.0      0.0  		codirectional_collisions = np.logical_and(
   204         1          6.0      6.0      0.1  			all_collisions, ~headon_collisions)
   205                                           
   206         1         13.0     13.0      0.2  		n_total_collisions = all_collisions.sum()
   207         1          8.0      8.0      0.1  		n_headon_collisions = headon_collisions.sum()
   208         1          8.0      8.0      0.1  		n_codirectional_collisions = codirectional_collisions.sum()
   209                                           
   210                                           		# Get coordinates for where the collisions occur
   211         1          3.0      3.0      0.0  		headon_collision_coordinates = coordinates[headon_collisions]
   212         1          2.0      2.0      0.0  		codirectional_collision_coordinates = coordinates[
   213         1          2.0      2.0      0.0  			codirectional_collisions]
   214                                           
   215                                           		# Reset coordinates of RNAPs that cross the boundaries between right
   216                                           		# and left replichores
   217         1          2.0      2.0      0.0  		updated_coordinates[
   218         1         10.0     10.0      0.1  			updated_coordinates > self.replichore_lengths[0]
   219         1          7.0      7.0      0.1  			] -= self.chromosome_length
   220         1          2.0      2.0      0.0  		updated_coordinates[
   221         1          8.0      8.0      0.1  			updated_coordinates < -self.replichore_lengths[1]
   222         1          6.0      6.0      0.1  			] += self.chromosome_length
   223                                           
   224                                           		# Calculate changes in mass associated with polymerization
   225         1          2.0      2.0      0.0  		added_rna_mass = computeMassIncrease(
   226         1         75.0     75.0      1.0  			sequences, sequenceElongations, self.ntWeights)
   227         1         14.0     14.0      0.2  		didInitialize = (transcript_lengths == 0) & (sequenceElongations > 0)
   228         1         18.0     18.0      0.2  		added_rna_mass[didInitialize] += self.endWeight
   229                                           
   230                                           		# Update attributes and submasses of active RNAPs
   231         1          3.0      3.0      0.0  		self.active_RNAPs.attrIs(
   232         1          2.0      2.0      0.0  			transcript_length=updated_lengths,
   233         1         26.0     26.0      0.3  			coordinates=updated_coordinates)
   234         1         19.0     19.0      0.3  		self.active_RNAPs.add_submass_by_name("RNA", added_rna_mass)
   235                                           
   236         1          4.0      4.0      0.1  		if n_total_collisions > 0:
   237                                           			# Remove polymerases that are projected to collide with replisomes
   238                                           			self.active_RNAPs.delByIndexes(np.where(all_collisions)[0])
   239                                           
   240                                           			# Increment counts of inactive RNA polymerases
   241                                           			self.inactiveRnaPolys.countInc(n_total_collisions)
   242                                           
   243                                           			# Get lengths of transcripts that were terminated prematurely as a
   244                                           			# result of the collision
   245                                           			incomplete_sequence_lengths = updated_lengths[all_collisions]
   246                                           
   247                                           			# Increment counts of bases in incomplete transcripts
   248                                           			incomplete_sequences = buildSequences(
   249                                           				self.rnaSequences,
   250                                           				TU_indexes[all_collisions],
   251                                           				np.zeros(n_total_collisions, dtype=np.int64),
   252                                           				np.full(n_total_collisions, incomplete_sequence_lengths.max()))
   253                                           
   254                                           			base_counts = np.zeros(4, dtype=np.int64)
   255                                           
   256                                           			for sl, seq in izip(incomplete_sequence_lengths, incomplete_sequences):
   257                                           				base_counts += np.bincount(seq[:sl], minlength = 4)
   258                                           
   259                                           			self.fragmentBases.countsInc(base_counts)
   260                                           			self.ppi.countInc(n_total_collisions)
   261                                           
   262                                           		# Determine if transcript has reached the end of the sequence
   263         1         12.0     12.0      0.2  		terminalLengths = self.rnaLengths[TU_indexes]
   264         1          3.0      3.0      0.0  		didTerminate = np.logical_and(
   265         1         11.0     11.0      0.1  			updated_lengths == terminalLengths, ~all_collisions)
   266         1          2.0      2.0      0.0  		terminatedRnas = np.bincount(
   267         1         15.0     15.0      0.2  			TU_indexes[didTerminate], minlength = self.rnaSequences.shape[0])
   268                                           
   269                                           		# Assume transcription from all rRNA genes produce rRNAs from the first
   270                                           		# operon. This is done to simplify the complexation reactions that
   271                                           		# produce ribosomal subunits.
   272         1         20.0     20.0      0.3  		n_total_16Srrna = terminatedRnas[self.idx_16Srrna].sum()
   273         1         14.0     14.0      0.2  		n_total_23Srrna = terminatedRnas[self.idx_23Srrna].sum()
   274         1         12.0     12.0      0.2  		n_total_5Srrna = terminatedRnas[self.idx_5Srrna].sum()
   275                                           
   276         1          6.0      6.0      0.1  		terminatedRnas[self.idx_16Srrna] = 0
   277         1          5.0      5.0      0.1  		terminatedRnas[self.idx_23Srrna] = 0
   278         1          5.0      5.0      0.1  		terminatedRnas[self.idx_5Srrna] = 0
   279                                           
   280         1          6.0      6.0      0.1  		terminatedRnas[self.idx_16Srrna[0]] = n_total_16Srrna
   281         1          5.0      5.0      0.1  		terminatedRnas[self.idx_23Srrna[0]] = n_total_23Srrna
   282         1          5.0      5.0      0.1  		terminatedRnas[self.idx_5Srrna[0]] = n_total_5Srrna
   283                                           
   284                                           		# Remove polymerases that have finished transcription from unique
   285                                           		# molecules
   286         1         34.0     34.0      0.4  		self.active_RNAPs.delByIndexes(np.where(didTerminate)[0])
   287                                           
   288         1         21.0     21.0      0.3  		nTerminated = didTerminate.sum()
   289         1         15.0     15.0      0.2  		nInitialized = didInitialize.sum()
   290         1         11.0     11.0      0.1  		nElongations = ntpsUsed.sum()
   291                                           
   292                                           		# Update bulk molecule counts
   293         1         51.0     51.0      0.7  		self.ntps.countsDec(ntpsUsed)
   294         1        156.0    156.0      2.1  		self.bulkRnas.countsInc(terminatedRnas)
   295         1         31.0     31.0      0.4  		self.inactiveRnaPolys.countInc(nTerminated)
   296         1         25.0     25.0      0.3  		self.ppi.countInc(nElongations - nInitialized)
   297                                           
   298                                           		# Write outputs to listeners
   299         1          3.0      3.0      0.0  		self.writeToListener(
   300         1          2.0      2.0      0.0  			"TranscriptElongationListener", "countRnaSynthesized",
   301         1         69.0     69.0      0.9  			terminatedRnas)
   302         1          2.0      2.0      0.0  		self.writeToListener(
   303         1         33.0     33.0      0.4  			"TranscriptElongationListener", "countNTPsUSed", nElongations)
   304                                           
   305         1         14.0     14.0      0.2  		self.writeToListener("GrowthLimits", "ntpUsed", ntpsUsed)
   306                                           
   307         1          2.0      2.0      0.0  		self.writeToListener(
   308         1         63.0     63.0      0.8  			"RnapData", "actualElongations", sequenceElongations.sum())
   309         1         53.0     53.0      0.7  		self.writeToListener("RnapData", "didTerminate", didTerminate.sum())
   310         1          2.0      2.0      0.0  		self.writeToListener(
   311         1          1.0      1.0      0.0  			"RnapData", "terminationLoss",
   312         1         88.0     88.0      1.2  			(terminalLengths - transcript_lengths)[didTerminate].sum())
   313                                           
   314         1          2.0      2.0      0.0  		self.writeToListener(
   315         1         32.0     32.0      0.4  			"RnapData", "n_total_collisions", n_total_collisions)
   316         1          2.0      2.0      0.0  		self.writeToListener(
   317         1         12.0     12.0      0.2  			"RnapData", "n_headon_collisions", n_headon_collisions)
   318         1          3.0      3.0      0.0  		self.writeToListener(
   319         1          2.0      2.0      0.0  			"RnapData", "n_codirectional_collisions",
   320         1         30.0     30.0      0.4  			n_codirectional_collisions)
   321         1          2.0      2.0      0.0  		self.writeToListener(
   322         1          2.0      2.0      0.0  			"RnapData", "headon_collision_coordinates",
   323         1         34.0     34.0      0.4  			headon_collision_coordinates, writeMethod=WriteMethod.fill)
   324         1          3.0      3.0      0.0  		self.writeToListener(
   325         1          2.0      2.0      0.0  			"RnapData", "codirectional_collision_coordinates",
   326         1         45.0     45.0      0.6  			codirectional_collision_coordinates, writeMethod=WriteMethod.fill)

