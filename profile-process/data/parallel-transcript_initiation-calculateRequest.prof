Timer unit: 1e-06 s

Total time: 0.006435 s
File: /home/travis/wcEcoli/models/ecoli/processes/transcript_initiation.py
Function: calculateRequest at line 118

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   118                                           	@line_profile
   119                                           	def calculateRequest(self):
   120                                           		# Get all inactive RNA polymerases
   121         1         13.0     13.0      0.2  		self.inactiveRnaPolys.requestAll()
   122                                           
   123                                           		# Read current environment
   124         1          3.0      3.0      0.0  		current_media_id = self._external_states['Environment'].current_media_id
   125                                           
   126         1         10.0     10.0      0.2  		if self.full_chromosomes.total_counts()[0] > 0:
   127                                           			# Get attributes of promoters
   128         1       1183.0   1183.0     18.4  			TU_index, bound_TF = self.promoters.attrs("TU_index", "bound_TF")
   129                                           
   130         1          2.0      2.0      0.0  			if self.ppgpp_regulation:
   131                                           				cell_mass = self.readFromListener("Mass", "cellMass") * units.fg
   132                                           				cell_volume = cell_mass / self.cell_density
   133                                           				counts_to_molar = 1 / (self.n_avogadro * cell_volume)
   134                                           				ppgpp_conc = self.ppgpp.total_counts()[0] * counts_to_molar
   135                                           				basal_prob = self.synth_prob(ppgpp_conc, self.copy_number)
   136                                           			else:
   137         1          2.0      2.0      0.0  				basal_prob = self.basal_prob
   138                                           
   139                                           			# Calculate probabilities of the RNAP binding to each promoter
   140         1         21.0     21.0      0.3  			self.promoter_init_probs = (basal_prob[TU_index] +
   141         1        791.0    791.0     12.3  				np.multiply(self.delta_prob_matrix[TU_index, :], bound_TF).sum(axis=1))
   142                                           
   143         1          3.0      3.0      0.0  			if len(self.genetic_perturbations) > 0:
   144                                           				self._rescale_initiation_probs(
   145                                           					self.genetic_perturbations["fixedRnaIdxs"],
   146                                           					self.genetic_perturbations["fixedSynthProbs"],
   147                                           					TU_index)
   148                                           
   149                                           			# Adjust probabilities to not be negative
   150         1         15.0     15.0      0.2  			self.promoter_init_probs[self.promoter_init_probs < 0] = 0.0
   151         1         31.0     31.0      0.5  			self.promoter_init_probs /= self.promoter_init_probs.sum()
   152                                           
   153         1          2.0      2.0      0.0  			if not self.ppgpp_regulation:
   154                                           				# Adjust synthesis probabilities depending on environment
   155         1          2.0      2.0      0.0  				synthProbFractions = self.rnaSynthProbFractions[current_media_id]
   156                                           
   157                                           				# Create masks for different types of RNAs
   158         1        807.0    807.0     12.5  				is_mrna = np.isin(TU_index, self.idx_mrna)
   159         1        560.0    560.0      8.7  				is_trna = np.isin(TU_index, self.idx_trna)
   160         1        224.0    224.0      3.5  				is_rrna = np.isin(TU_index, self.idx_rrna)
   161         1        579.0    579.0      9.0  				is_rprotein = np.isin(TU_index, self.idx_rprotein)
   162         1         57.0     57.0      0.9  				is_rnap = np.isin(TU_index, self.idx_rnap)
   163         1          8.0      8.0      0.1  				is_fixed = is_trna | is_rrna | is_rprotein | is_rnap
   164                                           
   165                                           				# Rescale initiation probabilities based on type of RNA
   166         1         74.0     74.0      1.1  				self.promoter_init_probs[is_mrna] *= synthProbFractions["mRna"] / self.promoter_init_probs[is_mrna].sum()
   167         1         27.0     27.0      0.4  				self.promoter_init_probs[is_trna] *= synthProbFractions["tRna"] / self.promoter_init_probs[is_trna].sum()
   168         1         22.0     22.0      0.3  				self.promoter_init_probs[is_rrna] *= synthProbFractions["rRna"] / self.promoter_init_probs[is_rrna].sum()
   169                                           
   170                                           				# Set fixed synthesis probabilities for RProteins and RNAPs
   171         1          2.0      2.0      0.0  				self._rescale_initiation_probs(
   172         1          5.0      5.0      0.1  					np.concatenate((self.idx_rprotein, self.idx_rnap)),
   173         1          1.0      1.0      0.0  					np.concatenate((
   174         1          3.0      3.0      0.0  						self.rnaSynthProbRProtein[current_media_id],
   175         1          4.0      4.0      0.1  						self.rnaSynthProbRnaPolymerase[current_media_id]
   176                                           						)),
   177         1       1516.0   1516.0     23.6  					TU_index)
   178                                           
   179         1         17.0     17.0      0.3  				assert self.promoter_init_probs[is_fixed].sum() < 1.0
   180                                           
   181                                           				# Scale remaining synthesis probabilities accordingly
   182         1         35.0     35.0      0.5  				scaleTheRestBy = (1. - self.promoter_init_probs[is_fixed].sum()) / self.promoter_init_probs[~is_fixed].sum()
   183         1         34.0     34.0      0.5  				self.promoter_init_probs[~is_fixed] *= scaleTheRestBy
   184                                           
   185                                           		# If there are no chromosomes in the cell, set all probs to zero
   186                                           		else:
   187                                           			self.promoter_init_probs = np.zeros(self.promoters.total_counts())
   188                                           
   189         1          4.0      4.0      0.1  		self.fracActiveRnap = self.fracActiveRnapDict[current_media_id]
   190         1          3.0      3.0      0.0  		self.rnaPolymeraseElongationRate = self.rnaPolymeraseElongationRateDict[current_media_id]
   191         1          2.0      2.0      0.0  		self.elongation_rates = self.make_elongation_rates(
   192         1          3.0      3.0      0.0  			self.randomState,
   193         1         45.0     45.0      0.7  			self.rnaPolymeraseElongationRate.asNumber(units.nt / units.s),
   194         1          2.0      2.0      0.0  			1,  # want elongation rate, not lengths adjusted for time step
   195         1        323.0    323.0      5.0  			self.variable_elongation)

