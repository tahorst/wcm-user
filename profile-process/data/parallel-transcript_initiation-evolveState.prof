Timer unit: 1e-06 s

Total time: 0.005825 s
File: /home/travis/wcEcoli/models/ecoli/processes/transcript_initiation.py
Function: evolveState at line 198

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   198                                           	@line_profile
   199                                           	def evolveState(self):
   200                                           		# no synthesis if no chromosome
   201         1         16.0     16.0      0.3  		if self.full_chromosomes.total_counts()[0] == 0:
   202                                           			self.writeToListener(
   203                                           				"RnaSynthProb", "rnaSynthProb", np.zeros(self.n_TUs))
   204                                           			return
   205                                           
   206                                           		# Get attributes of promoters
   207         1          3.0      3.0      0.1  		TU_index, coordinates_promoters, domain_index_promoters, bound_TF = self.promoters.attrs(
   208         1       2122.0   2122.0     36.4  			"TU_index", "coordinates", "domain_index", "bound_TF")
   209                                           
   210                                           		# Construct matrix that maps promoters to transcription units
   211         1          9.0      9.0      0.2  		n_promoters = self.promoters.total_counts()
   212         1          3.0      3.0      0.1  		TU_to_promoter = scipy.sparse.csr_matrix(
   213         1         38.0     38.0      0.7  			(np.ones(n_promoters), (TU_index, np.arange(n_promoters))),
   214         1        829.0    829.0     14.2  			shape = (self.n_TUs, n_promoters))
   215                                           
   216                                           		# Compute synthesis probabilities of each transcription unit
   217         1         81.0     81.0      1.4  		TU_synth_probs = TU_to_promoter.dot(self.promoter_init_probs)
   218         1         30.0     30.0      0.5  		self.writeToListener("RnaSynthProb", "rnaSynthProb", TU_synth_probs)
   219                                           
   220                                           		# Shuffle synthesis probabilities if we're running the variant that
   221                                           		# calls this (In general, this should lead to a cell which does not
   222                                           		# grow and divide)
   223         1          2.0      2.0      0.0  		if self.shuffleIdxs is not None:
   224                                           			self._rescale_initiation_probs(
   225                                           				np.arange(self.n_TUs),
   226                                           				TU_synth_probs[self.shuffleIdxs],
   227                                           				TU_index)
   228                                           
   229                                           		# Calculate RNA polymerases to activate based on probabilities
   230         1          2.0      2.0      0.0  		self.activationProb = self._calculateActivationProb(
   231         1          2.0      2.0      0.0  			self.fracActiveRnap,
   232         1          2.0      2.0      0.0  			self.rnaLengths,
   233         1         56.0     56.0      1.0  			(units.nt / units.s) * self.elongation_rates,
   234         1        512.0    512.0      8.8  			TU_synth_probs)
   235         1          3.0      3.0      0.1  		n_activated_rnap = np.int64(
   236         1         23.0     23.0      0.4  			self.activationProb * self.inactiveRnaPolys.count())
   237                                           
   238         1          3.0      3.0      0.1  		if n_activated_rnap == 0:
   239                                           			return
   240                                           
   241                                           		#### Growth control code ####
   242                                           
   243                                           		# Sample a multinomial distribution of initiation probabilities to
   244                                           		# determine what promoters are initialized
   245         1          2.0      2.0      0.0  		n_initiations = self.randomState.multinomial(
   246         1        546.0    546.0      9.4  			n_activated_rnap, self.promoter_init_probs)
   247                                           
   248                                           		# If there are active replisomes, construct mask for promoters that are
   249                                           		# expected to be replicated in the current timestep.
   250                                           		# Assuming the replisome knocks off all RNAPs that it collides with,
   251                                           		# no transcription initiation should occur for these promoters.
   252                                           		# TODO (ggsun): This assumes that replisomes elongate at maximum rates.
   253                                           		# 	Ideally this should be done in the reconciler.
   254         1         25.0     25.0      0.4  		collision_mask = np.zeros_like(TU_index, dtype=np.bool)
   255                                           
   256         1          9.0      9.0      0.2  		if self.active_replisomes.total_counts()[0] > 0:
   257         1          3.0      3.0      0.1  			domain_index_replisome, right_replichore, coordinates_replisome = self.active_replisomes.attrs(
   258         1        336.0    336.0      5.8  				"domain_index", "right_replichore", "coordinates")
   259                                           
   260         1          2.0      2.0      0.0  			elongation_length = np.ceil(
   261         1         16.0     16.0      0.3  				self.dnaPolyElngRate * self.timeStepSec())
   262                                           
   263         1          3.0      3.0      0.1  			for rr, coord, dmn_idx in izip(right_replichore,
   264         3         15.0      5.0      0.3  					coordinates_replisome, domain_index_replisome):
   265         2          3.0      1.5      0.1  				if rr:
   266         1          2.0      2.0      0.0  					coordinates_mask = np.logical_and(
   267         1         17.0     17.0      0.3  						coordinates_promoters >= coord,
   268         1         33.0     33.0      0.6  						coordinates_promoters <= coord + elongation_length)
   269                                           				else:
   270         1          2.0      2.0      0.0  					coordinates_mask = np.logical_and(
   271         1         12.0     12.0      0.2  						coordinates_promoters <= coord,
   272         1         30.0     30.0      0.5  						coordinates_promoters >= coord - elongation_length)
   273                                           
   274         2         24.0     12.0      0.4  				mask = np.logical_and(domain_index_promoters == dmn_idx,
   275         2          9.0      4.5      0.2  					coordinates_mask)
   276         2         13.0      6.5      0.2  				collision_mask[mask] = True
   277                                           
   278                                           		# Set the number of initiations for these promoters to zero.
   279         1         20.0     20.0      0.3  		n_aborted_initiations = n_initiations[collision_mask].sum()
   280         1          7.0      7.0      0.1  		n_initiations[collision_mask] = 0
   281         1          3.0      3.0      0.1  		n_activated_rnap -= n_aborted_initiations
   282                                           
   283                                           		# Build list of transcription unit indexes and domain indexes for RNAPs
   284         1         37.0     37.0      0.6  		TU_index_rnap = np.repeat(TU_index, n_initiations)
   285         1         25.0     25.0      0.4  		domain_index_rnap = np.repeat(domain_index_promoters, n_initiations)
   286                                           
   287                                           		# Build list of starting coordinates and transcription directions
   288         1          9.0      9.0      0.2  		coordinates = self.replication_coordinate[TU_index_rnap]
   289         1          3.0      3.0      0.1  		direction = self.transcription_direction[TU_index_rnap]
   290                                           
   291                                           		# Create the active RNA polymerases
   292         1          3.0      3.0      0.1  		self.activeRnaPolys.moleculesNew(
   293         1          2.0      2.0      0.0  			n_activated_rnap,
   294         1          1.0      1.0      0.0  			TU_index = TU_index_rnap,
   295         1          2.0      2.0      0.0  			domain_index = domain_index_rnap,
   296         1          1.0      1.0      0.0  			coordinates = coordinates,
   297         1         14.0     14.0      0.2  			direction = direction)
   298                                           
   299                                           		# Decrement counts of inactive RNAPs
   300         1         52.0     52.0      0.9  		self.inactiveRnaPolys.countDec(n_initiations.sum())
   301                                           
   302                                           		# Create masks for ribosomal RNAs
   303         1        142.0    142.0      2.4  		is_5Srrna = np.isin(TU_index, self.idx_5Srrna)
   304         1        148.0    148.0      2.5  		is_16Srrna = np.isin(TU_index, self.idx_16Srrna)
   305         1        129.0    129.0      2.2  		is_23Srrna = np.isin(TU_index, self.idx_23Srrna)
   306                                           
   307                                           		# Write outputs to listeners
   308         1          2.0      2.0      0.0  		self.writeToListener(
   309         1         60.0     60.0      1.0  			"RibosomeData", "rrn16S_produced", n_initiations[is_16Srrna].sum())
   310         1          3.0      3.0      0.1  		self.writeToListener(
   311         1         27.0     27.0      0.5  			"RibosomeData", "rrn23S_produced", n_initiations[is_23Srrna].sum())
   312         1          4.0      4.0      0.1  		self.writeToListener(
   313         1         31.0     31.0      0.5  			"RibosomeData", "rrn5S_produced", n_initiations[is_5Srrna].sum())
   314                                           
   315         1          2.0      2.0      0.0  		self.writeToListener(
   316         1          2.0      2.0      0.0  			"RibosomeData", "rrn16S_init_prob",
   317         1         40.0     40.0      0.7  			n_initiations[is_16Srrna].sum() / float(n_activated_rnap))
   318         1          2.0      2.0      0.0  		self.writeToListener(
   319         1          2.0      2.0      0.0  			"RibosomeData", "rrn23S_init_prob",
   320         1         37.0     37.0      0.6  			n_initiations[is_23Srrna].sum() / float(n_activated_rnap))
   321         1          3.0      3.0      0.1  		self.writeToListener("RibosomeData", "rrn5S_init_prob",
   322         1         28.0     28.0      0.5  			n_initiations[is_5Srrna].sum() / float(n_activated_rnap))
   323         1          8.0      8.0      0.1  		self.writeToListener("RibosomeData", "total_rna_init", n_activated_rnap)
   324                                           
   325         1          9.0      9.0      0.2  		self.writeToListener("RnapData", "didInitialize", n_activated_rnap)
   326         1        118.0    118.0      2.0  		self.writeToListener("RnapData", "rnaInitEvent", TU_to_promoter.dot(n_initiations))
   327                                           
   328         1          2.0      2.0      0.0  		self.writeToListener(
   329         1          9.0      9.0      0.2  			"RnapData", "n_aborted_initiations", n_aborted_initiations)

