Timer unit: 1e-06 s

Total time: 0.000319 s
File: /home/travis/wcEcoli/models/ecoli/processes/equilibrium.py
Function: evolveState at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           	@line_profile
    65                                           	def evolveState(self):
    66                                           		# Get counts of molecules allocated to this process
    67         1         12.0     12.0      3.8  		moleculeCounts = self.molecules.counts()
    68                                           
    69                                           		# If we didn't get allocated all the molecules we need, make do with what we have
    70                                           		# (decrease reaction fluxes so that they make use of what we have, but not more)
    71         1          1.0      1.0      0.3  		rxnFluxes = self.rxnFluxes.copy()
    72         1          8.0      8.0      2.5  		insufficientMetaboliteIdxs = np.where(self.req > moleculeCounts)[0]
    73         8         11.0      1.4      3.4  		for insufficientMetaboliteIdx in insufficientMetaboliteIdxs:
    74         7         34.0      4.9     10.7  			rxnPosIdxs = np.where(np.logical_and(self.stoichMatrix[insufficientMetaboliteIdx, :] != 0, rxnFluxes > 0))[0]
    75         7         24.0      3.4      7.5  			rxnNegIdxs = np.where(np.logical_and(self.stoichMatrix[insufficientMetaboliteIdx, :] != 0, rxnFluxes < 0))[0]
    76        14         77.0      5.5     24.1  			while(np.dot(self.stoichMatrix, rxnFluxes)[insufficientMetaboliteIdx] + moleculeCounts[insufficientMetaboliteIdx] < 0):
    77         7         20.0      2.9      6.3  				rxnFluxes[rxnPosIdxs] -= 1
    78         7         22.0      3.1      6.9  				rxnFluxes[rxnNegIdxs] += 1
    79         7         15.0      2.1      4.7  				rxnFluxes[rxnPosIdxs] = np.fmax(0, rxnFluxes[rxnPosIdxs])
    80         7         13.0      1.9      4.1  				rxnFluxes[rxnNegIdxs] = np.fmin(0, rxnFluxes[rxnNegIdxs])
    81                                           
    82         1         19.0     19.0      6.0  		assert(np.all(moleculeCounts + np.dot(self.stoichMatrix, rxnFluxes) >= 0))
    83                                           
    84                                           		# Increment changes in molecule counts
    85         1          6.0      6.0      1.9  		deltaMolecules = np.dot(self.stoichMatrix, rxnFluxes)
    86         1         26.0     26.0      8.2  		self.molecules.countsInc(deltaMolecules)
    87                                           
    88                                           		# Write outputs to listeners
    89         1          2.0      2.0      0.6  		self.writeToListener("EquilibriumListener", "reactionRates", (
    90         1         29.0     29.0      9.1  			deltaMolecules[self.product_indices] / self.timeStepSec()
    91                                           			))

