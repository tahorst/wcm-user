Timer unit: 1e-06 s

Total time: 0.001147 s
File: /home/travis/wcEcoli/models/ecoli/processes/polypeptide_initiation.py
Function: evolveState at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                           	@line_profile
    86                                           	def evolveState(self):
    87                                           		# Calculate number of ribosomes that could potentially be initalized based on
    88                                           		# counts of free 30S and 50S subunits
    89         1          1.0      1.0      0.1  		inactiveRibosomeCount = np.min([
    90         1         22.0     22.0      1.9  			self.ribosome30S.count().sum(),
    91         1         23.0     23.0      2.0  			self.ribosome50S.count().sum(),
    92                                           			])
    93                                           
    94                                           		# Calculate initiation probabilities for ribosomes based on mRNA counts and associated
    95                                           		# mRNA translational efficiencies
    96         1          0.0      0.0      0.0  		proteinInitProb = normalize(
    97         1        104.0    104.0      9.1  			self.mRnas.counts() * self.translationEfficiencies
    98                                           			)
    99                                           
   100                                           
   101                                           		# Calculate actual number of ribosomes that should be activated based on probabilities
   102         1          1.0      1.0      0.1  		self.activationProb = self._calculateActivationProb(
   103         1          0.0      0.0      0.0  			self.fracActiveRibosome,
   104         1          1.0      1.0      0.1  			self.proteinLengths,
   105         1          1.0      1.0      0.1  			self.elongation_rates,
   106         1          1.0      1.0      0.1  			proteinInitProb,
   107         1         87.0     87.0      7.6  			self.timeStepSec())
   108                                           
   109         1          2.0      2.0      0.2  		ribosomeToActivate = np.int64(self.activationProb * inactiveRibosomeCount)
   110                                           
   111         1          1.0      1.0      0.1  		if ribosomeToActivate == 0:
   112                                           			return
   113                                           
   114                                           		# Sample multinomial distribution to determine which mRNAs have full 70S
   115                                           		# ribosomes initalized on them
   116         1          2.0      2.0      0.2  		nNewProteins = self.randomState.multinomial(
   117         1          1.0      1.0      0.1  			ribosomeToActivate,
   118         1        152.0    152.0     13.3  			proteinInitProb
   119                                           			)
   120                                           
   121                                           		# Each ribosome is assigned a protein index for the protein that corresponds to the
   122                                           		# polypeptide it will polymerize. This is done in blocks of protein ids for efficiency.
   123         1          2.0      2.0      0.2  		proteinIndexes = np.empty(ribosomeToActivate, np.int64)
   124         1          5.0      5.0      0.4  		nonzeroCount = (nNewProteins > 0)
   125         1          0.0      0.0      0.0  		startIndex = 0
   126         1          1.0      1.0      0.1  		for proteinIndex, counts in itertools.izip(
   127         1         15.0     15.0      1.3  				np.arange(nNewProteins.size)[nonzeroCount],
   128       355        202.0      0.6     17.6  				nNewProteins[nonzeroCount],
   129                                           				):
   130                                           
   131       354        279.0      0.8     24.3  			proteinIndexes[startIndex:startIndex+counts] = proteinIndex
   132       354        176.0      0.5     15.3  			startIndex += counts
   133                                           
   134                                           		# Create active 70S ribosomes and assign their protein indexes calculated above
   135         1          1.0      1.0      0.1  		self.activeRibosomes.moleculesNew(
   136         1          0.0      0.0      0.0  			ribosomeToActivate,
   137         1          5.0      5.0      0.4  			proteinIndex = proteinIndexes
   138                                           			)
   139                                           
   140                                           		# Decrement free 30S and 70S ribosomal subunit counts
   141         1         27.0     27.0      2.4  		self.ribosome30S.countDec(nNewProteins.sum())
   142         1         15.0     15.0      1.3  		self.ribosome50S.countDec(nNewProteins.sum())
   143                                           
   144                                           		# Write number of initalized ribosomes to listener
   145         1         15.0     15.0      1.3  		self.writeToListener("RibosomeData", "didInitialize", nNewProteins.sum())
   146         1          5.0      5.0      0.4  		self.writeToListener("RibosomeData", "probTranslationPerTranscript", proteinInitProb)

