Timer unit: 1e-06 s

Total time: 0.000787 s
File: /home/travis/wcEcoli/models/ecoli/processes/transcript_elongation.py
Function: calculateRequest at line 76

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           	@line_profile
    77                                           	def calculateRequest(self):
    78                                           		# Calculate elongation rate based on the current media
    79         1          2.0      2.0      0.3  		current_media_id = self._external_states['Environment'].current_media_id
    80                                           
    81         1         20.0     20.0      2.5  		self.rnapElongationRate = self.rnaPolymeraseElongationRateDict[current_media_id].asNumber(units.nt / units.s)
    82                                           
    83         1          0.0      0.0      0.0  		self.elongation_rates = self.make_elongation_rates(
    84         1          1.0      1.0      0.1  			self.randomState,
    85         1          1.0      1.0      0.1  			self.rnapElongationRate,
    86         1          2.0      2.0      0.3  			self.timeStepSec(),
    87         1        247.0    247.0     31.4  			self.variable_elongation)
    88                                           
    89                                           		# If there are no active RNA polymerases, return immediately
    90         1          5.0      5.0      0.6  		if self.active_RNAPs.total_counts()[0] == 0:
    91                                           			return
    92                                           
    93                                           		# Determine total possible sequences of nucleotides that can be
    94                                           		# transcribed in this time step for each polymerase
    95         1          1.0      1.0      0.1  		TU_indexes, transcript_lengths = self.active_RNAPs.attrs(
    96         1        216.0    216.0     27.4  			'TU_index', 'transcript_length')
    97         1          2.0      2.0      0.3  		sequences = buildSequences(
    98         1          1.0      1.0      0.1  			self.rnaSequences,
    99         1          0.0      0.0      0.0  			TU_indexes,
   100         1          1.0      1.0      0.1  			transcript_lengths,
   101         1        131.0    131.0     16.6  			self.elongation_rates)
   102                                           
   103         1          1.0      1.0      0.1  		sequenceComposition = np.bincount(
   104         1        117.0    117.0     14.9  			sequences[sequences != polymerize.PAD_VALUE], minlength = 4)
   105                                           
   106                                           		# Calculate if any nucleotides are limited and request up to the number
   107                                           		# in the sequences or number available
   108         1          3.0      3.0      0.4  		ntpsTotal = self.ntps.total_counts()
   109         1          6.0      6.0      0.8  		maxFractionalReactionLimit = np.fmin(1, ntpsTotal / sequenceComposition)
   110         1          4.0      4.0      0.5  		self.ntps.requestIs(maxFractionalReactionLimit * sequenceComposition)
   111                                           
   112         1          0.0      0.0      0.0  		self.writeToListener(
   113         1         13.0     13.0      1.7  			"GrowthLimits", "ntpPoolSize", self.ntps.total_counts())
   114         1          1.0      1.0      0.1  		self.writeToListener(
   115         1          1.0      1.0      0.1  			"GrowthLimits", "ntpRequestSize",
   116         1          7.0      7.0      0.9  			maxFractionalReactionLimit * sequenceComposition)
   117                                           
   118                                           		# Request full access to active RNAPs
   119         1          4.0      4.0      0.5  		self.active_RNAPs.request_access(self.EDIT_DELETE_ACCESS)

